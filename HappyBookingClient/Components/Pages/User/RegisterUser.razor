@page "/register-user"
@using HappyBookingClient.Service.IService
@using HappyBookingShare.Common
@using HappyBookingShare.Request.User
@inject IUserService _userService
@inject NavigationManager _navigation
@inject ILanguageService _languageService

<MudBreadcrumbs Items="mudBreadcrumbs" Class="p-0 mb-3 mt-0"></MudBreadcrumbs>
<MudGrid Justify="Justify.Center">
    <MudItem md="6" sm="12" xs="12">
        <MudText Typo="Typo.h6">@_languageService["Register"]</MudText>
        <MudCard>
            @if (isShowAlert)
            {
                <MudAlert Severity="@severity" Variant="Variant.Filled" Dense="true" ShowCloseIcon="true" CloseIconClicked="@(() => isShowAlert = false)">@message</MudAlert>
            }
            <MudForm Model="@requestModel" @ref="@form" ValidationDelay="0">
                <MudCardContent>
                    <MudTextField @bind-Value="requestModel.FullName"
                                  Immediate="true"
                                  placeholder="@_languageService["FullName"]"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.DriveFileRenameOutline"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="@_languageService["RequiredError"]"
                                  Class="pt-0" />

                    <MudTextField @bind-Value="requestModel.Email"
                                  Immediate="true"
                                  placeholder="@_languageService["Email"]"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="@_languageService["RequiredError"]"
                                  InputType="InputType.Email" />

                    <MudTextField @bind-Value="requestModel.PhoneNumber"
                                  Immediate="true"
                                  placeholder="@_languageService["PhoneNumber"]"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.PhonelinkRing"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="@_languageService["RequiredError"]"
                                  InputType="InputType.Telephone" />

                    <MudTextField @bind-Value="requestModel.CitizenIdentificationNumber"
                                  Immediate="true"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.RememberMe"
                                  Variant="Variant.Outlined"
                                  RequiredError="@_languageService["RequiredError"]"
                                  placeholder="@_languageService["CitizenIdentificationNumber"]" />

                    <MudTextField @bind-Value="requestModel.Address"
                                  Immediate="true"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.AddLocationAlt"
                                  Variant="Variant.Outlined"
                                  RequiredError="@_languageService["RequiredError"]"
                                  placeholder="@_languageService["Address"]" />

                    <MudTextField @bind-Value="requestModel.Password"
                                  Immediate="true"
                                  placeholder="@_languageService["Password"]"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  RequiredError="@_languageService["RequiredError"]"
                                  AdornmentIcon="@Icons.Material.Filled.Password" />

                    <MudTextField @bind-Value="confirmPassword"
                                  Immediate="true"
                                  placeholder="@_languageService["ConfirmPassword"]"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  RequiredError="@_languageService["RequiredError"]"
                                  AdornmentIcon="@Icons.Material.Filled.Password" />
                </MudCardContent>
            </MudForm>
            <MudCardActions Class="pt-0">
                <MudButton Variant="Variant.Filled" Class="mr-2" Size="Size.Small" Color="Color.Success" OnClick="@(async () => await SaveClick())">@_languageService["Save"]</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Default" OnClick="@(() => _navigation.NavigateTo("/"))">@_languageService["Cancel"]</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private List<BreadcrumbItem> mudBreadcrumbs;
    private MudForm form;
    private RegisterUserRequest requestModel = new();
    private string confirmPassword = string.Empty;
    private bool isShowAlert = false;
    private Severity severity = Severity.Normal;
    private string message = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _languageService.LoadLanguage();
            InitializeBreadcrumbs();
            StateHasChanged();
        }
    }

    private void InitializeBreadcrumbs()
    {
        mudBreadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(_languageService["Home"], href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem(_languageService["User"], href: "user-list", icon: Icons.Material.Filled.People),
            new BreadcrumbItem(_languageService["Register"], href: "register-user", icon: Icons.Material.Filled.PersonAddAlt1)
        };
    }

    private async Task SaveClick()
    {
        isShowAlert = false;
        await form.Validate();
        if (!form.IsValid)
        {
            return;
        }
        if (string.IsNullOrEmpty(requestModel.Password) || confirmPassword != requestModel.Password)
        {
            ShowAlert(_languageService["InvalidConfirmPassword"], Severity.Warning);
            return;
        }
        if (form.IsValid)
        {
            if (!Validator.IsValidEmail(requestModel.Email))
            {
                ShowAlert(_languageService["InvalidEmail"], Severity.Warning);
                requestModel.Email = string.Empty;
                await form.Validate();
                return;
            }
            if (!Validator.IsValidPhoneNumber(requestModel.PhoneNumber))
            {
                ShowAlert(_languageService["InvalidPhoneNumber"], Severity.Warning);
                requestModel.PhoneNumber = string.Empty;
                await form.Validate();
                return;
            }
            var result = await _userService.RegisterUser(requestModel);
            if (result == null || !result.Data)
            {
                ShowAlert(result?.Message ?? string.Empty, Severity.Warning);
                return;
            }
            var loginResponse = await _userService.Login(new LoginRequest() { UserName = requestModel.PhoneNumber, Password = requestModel.Password });
            if (loginResponse != null)
            {
                _navigation.NavigateTo("/");
                requestModel = new();
            }
        }
    }

    private void ShowAlert(string message, Severity severity)
    {
        this.isShowAlert = true;
        this.severity = severity;
        this.message = message;
    }

}