@page "/change-password"
@using HappyBookingClient.Service.IService
@using HappyBookingShare.Common
@using HappyBookingShare.Request.Auth
@using HappyBookingShare.Request.User
@inject IUserService _userService
@inject NavigationManager _navigation
@inject ILanguageService _languageService
@inject IUploadImageService _uploadImageService
@inject IJSRuntime _jsRuntime

<MudBreadcrumbs Items="mudBreadcrumbs" Class="p-0 mb-3 mt-0"></MudBreadcrumbs>

<MudGrid Justify="Justify.Center">
    <MudItem md="6" sm="12" xs="12">
        <MudText Typo="Typo.h6">@_languageService["ChangePassword"]</MudText>
        <MudCard>
            @if (isShowAlert)
            {
                <MudAlert Severity="@severity" Variant="Variant.Filled" Dense="true" ShowCloseIcon="true" CloseIconClicked="@(() => isShowAlert = false)">@message</MudAlert>
            }
            <MudForm Model="@requestModel" @ref="@form" ValidationDelay="0">
                <MudCardContent>
                    <MudTextField @bind-Value="requestModel.OldPassword"
                                  Immediate="true"
                                  placeholder="@_languageService["OldPassword"]"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  RequiredError="@_languageService["RequiredError"]"
                                  AdornmentIcon="@Icons.Material.Filled.Password" />

                    <MudTextField @bind-Value="requestModel.NewPassword"
                                  Immediate="true"
                                  placeholder="@_languageService["NewPassword"]"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  RequiredError="@_languageService["RequiredError"]"
                                  AdornmentIcon="@Icons.Material.Filled.Password" />

                    <MudTextField @bind-Value="confirmPassword"
                                  Immediate="true"
                                  placeholder="@_languageService["ConfirmPassword"]"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  RequiredError="@_languageService["RequiredError"]"
                                  AdornmentIcon="@Icons.Material.Filled.Password" />
                </MudCardContent>
            </MudForm>
            <MudCardActions Class="pt-0">
                <MudButton Variant="Variant.Filled" Class="mr-2" Size="Size.Small" Color="Color.Success" OnClick="@(async () => await SaveClick())">@_languageService["Save"]</MudButton>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Default" OnClick="@(() => _navigation.NavigateTo("/"))">@_languageService["Cancel"]</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@if (isLoading)
{
    <div class="content-loading-overlay">
        <div class="spinner"></div>
    </div>
}

@code {
    private List<BreadcrumbItem>? mudBreadcrumbs;
    private MudForm? form;
    private ChangePasswordRequest requestModel = new();
    private bool isShowAlert = false;
    private string confirmPassword = string.Empty;
    private Severity severity = Severity.Normal;
    private string message = string.Empty;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _languageService.LoadLanguage();
            InitializeBreadcrumbs();
            StateHasChanged();
        }
    }

    private void InitializeBreadcrumbs()
    {
        mudBreadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(_languageService["Home"], href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem(_languageService["User"], href: "user-list", icon: Icons.Material.Filled.People),
            new BreadcrumbItem(_languageService["ChangePassword"], href: "change-password", icon: Icons.Material.Filled.PersonAddAlt1)
        };
    }

    private async Task SaveClick()
    {
        isLoading = true;
        try
        {
            isShowAlert = false;
            await form!.Validate();
            if (!form.IsValid)
            {
                return;
            }
            if (string.IsNullOrEmpty(requestModel.NewPassword) || confirmPassword != requestModel.NewPassword)
            {
                ShowAlert(_languageService["InvalidConfirmPassword"], Severity.Warning);
                return;
            }
            if (form.IsValid)
            {
                var result = await _userService.ChangePassword(requestModel);
                if (result == null || !result.Data)
                {
                    ShowAlert(result?.Message ?? string.Empty, Severity.Warning);
                    return;
                }
                ShowAlert(result?.Message ?? string.Empty, Severity.Success);
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAlert(string message, Severity severity)
    {
        this.isShowAlert = true;
        this.severity = severity;
        this.message = message;
    }
}